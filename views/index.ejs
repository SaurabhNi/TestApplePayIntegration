<html lang="en" ng-app=""><head>
        <title>PayPal Payments SDK Demo</title>
        <style>
.hosted-field {
  height: 50px;
  box-sizing: border-box;
  width: 100%;
  padding: 12px;
  display: inline-block;
  box-shadow: none;
  font-weight: 600;
  font-size: 14px;
  border-radius: 6px;
  border: 1px solid #dddddd;
  line-height: 20px;
  background: #fcfcfc;
  margin-bottom: 12px;
  background: linear-gradient(to right, white 50%, #fcfcfc 50%);
  background-size: 200% 100%;
  background-position: right bottom;
  transition: all 300ms ease-in-out;
}

.hosted-fields--label {
  font-family: courier, monospace;
  text-transform: uppercase;
  font-size: 14px;
  display: block;
  margin-bottom: 6px;
}

.button-container {
  display: block;
  text-align: center;
}

.button {
  cursor: pointer;
  font-weight: 500;
  line-height: inherit;
  position: relative;
  text-decoration: none;
  text-align: center;
  border-style: solid;
  border-width: 1px;
  border-radius: 3px;
  -webkit-appearance: none;
  -moz-appearance: none;
  display: inline-block;
}

.button--small {
  padding: 10px 20px;
  font-size: 0.875rem;
}

.button--green {
  outline: none;
  background-color: #64d18a;
  border-color: #64d18a;
  color: white;
  transition: all 200ms ease;
}

.button--green:hover {
  background-color: #8bdda8;
  color: white;
}

.braintree-hosted-fields-focused {
  border: 1px solid #64d18a;
  border-radius: 1px;
  background-position: left bottom;
}

.braintree-hosted-fields-invalid {
  border: 1px solid #ed574a;
}

.braintree-hosted-fields-valid {
}

#cardForm {
  max-width: 50.75em;
  margin: 0 auto;
  padding: 1.875em;
}
        </style>
       </head>
      <body>

<script src="https://js.braintreegateway.com/web/3.76.4/js/client.min.js"></script>   
<script src="https://js.braintreegateway.com/web/3.76.4/js/paypal-checkout.min.js"></script> 
<!--<script src="https://js.braintreegateway.com/web/3.70.0/js/hosted-fields.min.js"></script> -->
<script src="https://js.braintreegateway.com/web/3.76.4/js/data-collector.min.js"></script> 
<!--
<script src='https://js.braintreegateway.com/web/3.70.0/js/three-d-secure.min.js'></script>-->
<!--
<script src="https://www.paypal.com/sdk/js?client-id=ARLF4LUwz7LHsNM6LG_k7lMcH9M9UCSouN5LvvLv6KxRjVezzfPeACXSqZ7FClrG3UyqSeNLEwWWk-F_&components=buttons&intent=capture&currency=USD" data-client-token="<%=token%>"></script>
<div id=div1  >
<form id="my-sample-form">
  <label for="card-number">Card Number</label>
  <div id="card-number"  class="hosted-field"></div>
  <label for="expiration-date">Expiration Date</label>
  <div id="expiration-date"  class="hosted-field"></div>
  <label for="cvv">CVV</label>
  <div id="cvv"  class="hosted-field"></div>
  <input type="checkbox" id="vault" name="vault">
  <label for="vault">Save this card</label>
  <input type="submit" value="Pay"/>
  <button value="submit" id="submit" class="btn">Pay with Card</button>
</form>
</div>
<div id="payments-sdk__contingency-lightbox"></div>-->

<!--
<script>
// Check if card fields are eligible to render for the buyer's country. The card fields are not eligible in all countries where buyers are located.

      var form = document.querySelector('#my-sample-form');
      var submit = document.querySelector('input[type="submit"]');

      braintree.client.create({
        authorization: "<%= bt_client_token %>"
      }, function (clientErr, clientInstance) {
        if (clientErr) {
          console.error(clientErr);
          return;
        }

        // This example shows Hosted Fields, but you can also use this
        // client instance to create additional components here, such as
        // PayPal or Data Collector.

        braintree.hostedFields.create({
          client: clientInstance,
          styles: {
            'input': {
              'font-size': '14px'
            },
            'input.invalid': {
              'color': 'red'
            },
            'input.valid': {
              'color': 'green'
            }
          },
          fields: {
            number: {
              selector: '#card-number',
              placeholder: '4111 1111 1111 1111'
            },
            cvv: {
              selector: '#cvv',
              placeholder: '123'
            },
            expirationDate: {
              selector: '#expiration-date',
              placeholder: '10/2022'
            }
          }
        }, function (hostedFieldsErr, hostedFieldsInstance) {
          if (hostedFieldsErr) {
            console.error(hostedFieldsErr);
            return;
          }

          submit.removeAttribute('disabled');

          form.addEventListener('submit', function (event) {
            event.preventDefault();

            hostedFieldsInstance.tokenize(function (tokenizeErr, payload) {
              if (tokenizeErr) {
                console.error(tokenizeErr);
                return;
              }

              // If this was a real integration, this is where you would
              // send the nonce to your server.
              console.log('Got a nonce: ' + payload.nonce);
              var threeDSecure;
              var nonce=payload.nonce;
              var bin=payload.details.bin;
              braintree.threeDSecure.create({
              version: 2, // Will use 3DS 2 whenever possible
              client: clientInstance
              }, function (threeDSecureErr, threeDSecureInstance) {
                if (threeDSecureErr) {
                // Handle error in 3D Secure component creation
                return;
              }
              threeDSecure = threeDSecureInstance;
              
              var threeDSecureParameters = {
               amount: '100.00',
               nonce: nonce, // Example: hostedFieldsTokenizationPayload.nonce
               // bin: bin, // Example: hostedFieldsTokenizationPayload.details.bin
                onLookupComplete: function (data, next) {
            // use `data` here, then call `next()`
            next();
            }};

            threeDSecure.verifyCard(threeDSecureParameters, function (err, response) {
            if (err) {
            // Handle error
            return;
            }
  // Send response.nonce to your server for use in your integration
  // The 3D Secure Authentication ID can be found 
  //  at response.threeDSecureInfo.threeDSecureAuthenticationId
  fetch('/checkout', {
              method: 'POST',
              headers: {
              'Content-Type': 'application/json',
              },
              body: JSON.stringify({"payment_method_nonce":response.nonce,
              "currency":"TestSGD","total":"100"})
               }).then(response => {
              if (!response.ok) {
                 alert('Something went wrong');
               }
               console.log("Payment is successful");
               alert("Payment is successful");
              });

      });// end of 3DS verify card
  });// end of 3DS object creation
});// end of hosted field tokenization 
},false); // end of form submit event handler 
});// end of hosted fields create
});// end of braintree instance create            

</script>-->


<script>
console.log("Just before entering hosted fields check");
  if (paypal.HostedFields.isEligible() === true) {
    console.log("Hosted Fields is enabled");
    paypal.HostedFields.render({
      createOrder: function(data, actions) {
        return fetch('/create-order', { method: 'POST' }).then(function(res) {
            return res.json();
        }).then(function(data) {
            return data.id;
        });
      },
      styles: {
          'input': {
              'font-size': '14px',
              'font-family': 'Product Sans',
              'color': '#3a3a3a'
          },
          ':focus': {
              'color': 'black'
          }
      },
      fields: {
          number: {
              selector: '#card-number',
              placeholder: 'Credit Card Number',
          },
          cvv: {
              selector: '#cvv',
              placeholder: 'CVV',
          },
          expirationDate: {
              selector: '#expiration-date',
              placeholder: 'MM/YYYY',
          }
      }
    }).then(hostedFields => {
      document.querySelector('#my-sample-form').addEventListener('submit', event => {
        event.preventDefault();
        console.log("Buyer Vaulting"+document.querySelector('#vault').checked);
        hostedFields.submit(
          {
          // Need to specify the buyer action to save the card
          contingencies: ['3D_SECURE'],
          vault: document.querySelector('#vault').checked,
          }
        ).then(payload => {
          console.log("Order Id is "+payload.orderId);
          console.log(payload.liabilityShifted);
          
          if (payload.liabilityShifted === undefined) {
                     // Handle no 3D Secure contingency passed scenario
                     console.log("Entering no 3DS");
                     return fetch('/capture-order/' + payload.orderId, {
            method: 'POST'
          }).then(response => {
            if (!response.ok) {
              alert('Something went wrong');
            }
            console.log("Payment is successful");
            alert("Payment is successful");
          });
                }

                if (payload.liabilityShifted) {
                     // Handle Buyer confirmed 3D Secure successfully
                     console.log("Entering 3DS completed successfully");
                     fetch('/get-order/' + payload.orderId, 
                    {
                    method: 'GET',
                    }).then(function(res) {
                      if(!res.ok)
                      {
                        alert('Something went wrong'); 
                      }
                      return res.json();
                    }).then(function(data){
                      console.log(data);
                    });


                     return fetch('/capture-order/' + payload.orderId, {
            method: 'POST'
          }).then(response => {
            if (!response.ok) {
              alert('Something went wrong');
            }
            console.log("Payment is successful");
            alert("Payment is successful");
          });
                }

                if (payload.liabilityShifted === false) {
                     // Handle buyer failed or skipped 3D Secure use-case
                     console.log("Entering 3DS failure case");
                     return fetch('/capture-order/' + payload.orderId, {
            method: 'POST'
          }).then(response => {
            if (!response.ok) {
              alert('Something went wrong');
            }
            console.log("Payment is successful");
            alert("Payment is successful");
          });
                }
              }).catch(function (error) {
                              console.log('PayPal CCF submission failed:' + error);
                              // error: {code: 'error', description: 'error'}                        // NOTE Consumer cancels 3D Secure flow within online banking app. Conflicts with above options.
                        }).finally(()=> console.log("Finally Executed"));
      });
    });
  }
</script> 


       <!--PayPal Payments JS SDK integration-->
       <!--
       <div id="paypal-button-container"></div>
         <script>
           var FUNDING_SOURCES = [
    paypal.FUNDING.CARD
];

//paypal.getFundingSources().forEach(function(fundingSource) {

// Initialize the buttons
    //var button = paypal.Buttons({fundingSource: fundingSource,
      paypal.Buttons({
        createOrder: function (data, actions) { 
                    return fetch('/create-order',{method:'POST',headers:{'Content-Type':'application/json'},body: JSON.stringify({}),json:true}).then(function(res)
                    {
                        return res.json();
                    }
                    ).then(function(data)
                    {
                      return data.id;
                    });
                   },

                    onApprove: function (data, actions) {
                    
                    // fetch('/get-order/' + data.orderID, 
                    // {
                    // method: 'GET',
                    // }).then(function(res) {
                    //   if(!res.ok)
                    //   {
                    //     alert('Something went wrong'); 
                    //   }
                    //   return res.json();
                    // }).then(function(data){
                    //   console.log(data);
                    // });
                    
                    return fetch('/capture-order/' + data.orderID, 
                    {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({})
                    }).then(function(res) {
                      if(!res.ok)
                      {
                        alert('Something went wrong'); 
                      }
                      return res.json();
                    }).then(function(data){
                      if(data.status=='success'){
                      alert("Payment captured successfully");
                    }
                    });
                    }
    }).render('#paypal-button-container');

// Check if the button is eligible
//if (button.isEligible()) {

    // Render the standalone button for that funding source
  // button.render('#paypal-button-container');
//}
//});


          //  paypal.Buttons(
          //    { 
          //     style: {
          //       color:  'blue',
          //       shape:  'pill',
          //       label:  'pay',
          //       layout: 'vertical'
          //   }, 
          //       createOrder: function (data, actions) { 
          //         return fetch('/create-order', { 
          //            method: 'POST' 
          //          }).then(function(res){
          //            return res.json();
          //            }).then(function(data) {
          //              return data.id;
          //            });
                     
        //           return actions.order.create({
        //             "intent": "CAPTURE",
				// "application_context":{"shipping_preference":"SET_PROVIDED_ADDRESS","return_url":"https://www.google.com","cancel_url":"https://www.amazon.com"},
				//"payer":{
				//	"phone":{
				//		"phone_number":{
				//			"national_number":"48226501000"
				//		}
				//	}
				//},
				// payer: {
				// 	name: {
				// 	  given_name: "PayPal",
				// 	  surname: "Customer"
				// 	},
				// 	address: {
				// 	  address_line_1: '123 ABC Street',
				// 	  address_line_2: 'Apt 2',
				// 	  admin_area_2: 'San Jose',
				// 	  admin_area_1: 'CA',
				// 	  postal_code: '95121',
				// 	  country_code: 'US'
				// 	},
				// 	email_address: "customer@domain.com",
				// 	phone: {
				// 	  phone_type: "MOBILE",
				// 	  phone_number: {
				// 		national_number: "14082508100"
				// 	  }
				// 	}
				//   },
          //       "purchase_units": [
					// {
					// 	"amount": {
					// 		"currency_code": "USD",
					// 		"value": "200.00",
					// 		"breakdown": {
					// 			"item_total": {
					// 			  "currency_code": "USD",
					// 			  "value": "180.00"
					// 			},
					// 			"tax_total": {
					// 				"currency_code": "USD",
					// 				"value": "20.00"
					// 			  }
					// 	 }
					// 	},
						// "shipping":{
						// 	"name":{
						// 		 "full_name":"PayPal Customer"
						// 	 },
						//  "address":{
						// 		   "address_line_1":"123 ABC Street",
						// 		   "address_line_2":"Apt 2",
						// 		  "admin_area_2":"San Jose",
						// 		  "admin_area_1":"CA",
						// 		   "postal_code":"95121",
						// 		   "country_code":"US"
						// 	   }
						// },
		// 				"items": [
		// 					{
		// 					  "name": "T-Shirt",
		// 					  "description": "Green XL#AE_Seller_001#Merchandise",
		// 					  "sku": "sku01",
		// 					  "unit_amount": {
		// 						"currency_code": "USD",
		// 						"value": "90.00"
		// 					  },
		// 					  "tax": {
		// 						"currency_code": "USD",
		// 						"value": "10.00"
		// 					  },
		// 					  "quantity": "1",
		// 					  "category": "PHYSICAL_GOODS"
		// 					},
		// 					{
		// 					  "name": "Shoes",
		// 					  "description": "Running, Size 10.5#AE_Seller_002#Merchandise",
		// 					  "sku": "sku02",
		// 					  "unit_amount": {
		// 						"currency_code": "USD",
		// 						"value": "45.00"
		// 					  },
		// 					  "tax": {
		// 						"currency_code": "USD",
		// 						"value": "5.00"
		// 					  },
		// 					  "quantity": "2",
		// 					  "category": "PHYSICAL_GOODS"
		// 					}
		// 				  ],
		// 			}
		// ]});
//},

//createBillingAgreement: function() {
  //   return fetch('/create-billing-agreement', {
    //  method: 'post',
      // headers: {
        // 'content-type': 'application/json'
       //}
     //}).then(function(res) {
       //return res.json();
     //}).then(function(data) {
      // return data.id;
     //});
   //},

                  // createSubscription: function(data, actions) {
                  //   // return actions.subscription.create({
                  //   //   'plan_id': 'YOUR_PLAN_ID' // Creates the subscription
                  //   // });
                  //   return 'I-B42MGX87APUF';
                  // },
                  
                  // onApprove: function(data, actions) {
                  // alert('You have successfully created subscription ' + data.subscriptionID); // Optional message given to subscriber
                  // },
                  


                  // onApprove: function (data, actions) {
                  //   return fetch('/capture-order/' + data.orderID, {
                  //   method: 'POST'}
                  //   ).then(function(res) {
                  //     if(!res.ok)
                  //     {
                  //       alert('Something went wrong'); 
                  //     }
                  //     return res.json();
                  //   }).then(function(data){
                  //     if(data.status=='success'){
                  //     alert("Payment captured successfully");
                  //   }
                  //   });
                  //   },


                    // onApprove: function (data, actions) {
                    // return fetch('/complete-billing-agreement/' + data.id, {
                    // method: 'POST'}
                    // ).then(function(res) {
                    //   if(!res.ok)
                    //   {
                    //     alert('Something went wrong'); 
                    //   }
                    //   return res.json();
                    // }).then(function(data){
                    //   if(data.status=='success'){
                    //   alert("Payment captured successfully");
                    // }
                    // });
                    // },

              //       onError: function (err) {
              //         console.log("Some unknown error happened"+err);
              //       }
              //       ,
              //       onCancel: function (data) {
              //         console.log("The buyer cancelled the transaction");
              //       }
              // }).render('#paypal-button-container');
          </script>
 -->


          <!-- PayPal and PayPal Credit Integration via BT SDK Integration-->
          
          <div id="paypal-button"></div>
          <div id="paypal-credit-button"></div>
         <!--
          <script src="https://www.paypalobjects.com/api/checkout.js" data-version-4 log-level="warn"></script>
          <script src="https://js.braintreegateway.com/web/3.62.2/js/client.min.js"></script>
          <script src="https://js.braintreegateway.com/web/3.62.2/js/paypal-checkout.min.js"></script>-->
          <script>
          braintree.client.create({
            authorization: "<%= bt_client_token %>"
          }, function (err, clientInstance) {
            braintree.dataCollector.create({
    client: clientInstance,
    paypal: true
  }, function (err, dataCollectorInstance) {
    if (err) {
      // Handle error
      return;
    }
    // At this point, you should access the dataCollectorInstance.deviceData value and provide it
    // to your server, e.g. by injecting it into your form as a hidden input
    myDeviceData = dataCollectorInstance.deviceData;
  });


            braintree.paypalCheckout.create({
              client: clientInstance
             // autoSetDataUserIdToken: true,
            }, function (err, paypalCheckoutInstance) {

              paypalCheckoutInstance.loadPayPalSDK({
  // Must be set to true when using the Vault flow
  vault: true

  // Defaults to USD, but must match the value used in `createPayment`
   //currency: 'USD',
   //intent: 'capture',
   //dataAttributes: {
     //   amount: "100.00"
      //}
}, function (loadSDKErr) {
  // Render the PayPal button (see Render the PayPal Button section)

  paypal.Buttons({
  fundingSource: paypal.FUNDING.PAYPAL,

  // createOrder: function () {
  //   return paypalCheckoutInstance.createPayment({
  //     flow: 'checkout',
  //     amount: 100.00,
  //     currency: 'USD',
  //     intent: 'capture',

  //     //new required parameters for this flow
  //     requestBillingAgreement: true,
  //     billingAgreementDetails: {
  //       description: 'Save your PayPal account for future top ups'
  //     }
  //   });
  // },
   createBillingAgreement: function () {
          return paypalCheckoutInstance.createPayment({
            flow: 'vault', // Required

            // The following are optional params
            billingAgreementDescription: 'Save your PayPal account for future top ups',
            enableShippingAddress: false,
            shippingAddressEditable: false
            // shippingAddressOverride: {
            //   recipientName: 'Scruff McGruff',
            //   line1: '1234 Main St.',
            //   line2: 'Unit 1',
            //   city: 'Chicago',
            //   countryCode: 'US',
            //   postalCode: '60652',
            //   state: 'IL',
            //   phone: '123.456.7890'
            // }
          });
        },
  onApprove: function (data, actions) {
          return paypalCheckoutInstance.tokenizePayment(data, function (err, payload) {
            // Submit `payload.nonce` to your server
            console.log("Device data is:"+myDeviceData);
            fetch('/checkout', {
              method: 'POST',
              headers: {
              'Content-Type': 'application/json',
              },
              body: JSON.stringify({"payment_method_nonce":payload.nonce,
              "currency":"testalipayaliexpress","total":"100","deviceData":myDeviceData})
               }).then(response => {
              if (!response.ok) {
                 alert('Something went wrong');
               }
               console.log("Payment is successful");
               alert("Payment is successful");
              });// end of BT Server Side SDK invocation

          });
        },

        onCancel: function (data) {
          console.log('PayPal payment cancelled', JSON.stringify(data, 0, 2));
        },

        onError: function (err) {
          console.error('PayPal error', err);
        }
}).render('#paypal-button');

});
          
              // Set up regular PayPal button
             // paypal.Button.render({
              //  env: 'sandbox', // or 'sandbox'
               // payment: function () {
                //  return paypalCheckoutInstance.createPayment({
                  //  flow: 'checkout',
                    //amount:"100",
                    //currency:"AED",
                    // billingAgreementDescription: 'Your agreement description',
                    // enableShippingAddress: true,
                    // shippingAddressEditable: false,
                    // shippingAddressOverride: {
                    //   recipientName: 'Scruff McGruff',
                    //   line1: '1234 Main St.',
                    //   line2: 'Unit 1',
                    //   city: 'Chicago',
                    //   countryCode: 'US',
                    //   postalCode: '60652',
                    //   state: 'IL',
                    //   phone: '123.456.7890'
                    // }
                  //});
                //},
                //onAuthorize: function (data, actions) {
                  //return paypalCheckoutInstance.tokenizePayment(data, function (err, payload) {
                    // Submit `payload.nonce` to your server
                    
                    //fetch('/checkout', {
              //method: 'POST',
              //headers: {
              //'Content-Type': 'application/json',
              //},
              //body: JSON.stringify({"payment_method_nonce":payload.nonce,
              //"currency":"AED","total":"100"})
              // }).then(response => {
              //if (!response.ok) {
                // alert('Something went wrong');
               //}
               //console.log("Payment is successful");
               //alert("Payment is successful");
              //});// end of BT Server Side SDK invocation

                //  });
                //},
              //}, '#paypal-button');
          
              // Set up PayPal Credit button
            //  paypal.Button.render({
              //  env: 'sandbox', // or 'sandbox'
               // style: {
                 // label: 'credit'
                //},
                //payment: function () {
                  //return paypalCheckoutInstance.createPayment({
                    //flow: 'checkout',
                    //offerCredit: true,
                    //amount:"100",
                    //currency:"USD",
                    // billingAgreementDescription: 'Your agreement description',
                    // enableShippingAddress: true,
                    // shippingAddressEditable: false,
                    // shippingAddressOverride: {
                    //   recipientName: 'Scruff McGruff',
                    //   line1: '1234 Main St.',
                    //   line2: 'Unit 1',
                    //   city: 'Chicago',
                    //   countryCode: 'US',
                    //   postalCode: '60652',
                    //   state: 'IL',
                    //   phone: '123.456.7890'
                    // }
                  //});
                //},
                //onAuthorize: function (data, actions) {
                  //return paypalCheckoutInstance.tokenizePayment(data, function (err, payload) {
                    // Submit `payload.nonce` to your server
                    
                    //fetch('/checkout', {
              //method: 'POST',
              //headers: {
              //'Content-Type': 'application/json',
              //},
              //body: JSON.stringify({"payment_method_nonce":payload.nonce,
              //"currency":"testalipayaliexpress","total":"100"})
               //}).then(response => {
              //if (!response.ok) {
                // alert('Something went wrong');
               //}
               //console.log("Payment is successful");
               //alert("Payment is successful");
              //});// end of BT Server Side SDK invocation

                //  });
                //},
              //}, '#paypal-credit-button');


            });
          });

</script>
      
    </body></html>