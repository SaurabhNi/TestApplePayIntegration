<html lang="en" ng-app=""><head>
        <title>PayPal Payments SDK Demo</title>
        <style>
.hosted-field {
  height: 50px;
  box-sizing: border-box;
  width: 100%;
  padding: 12px;
  display: inline-block;
  box-shadow: none;
  font-weight: 600;
  font-size: 14px;
  border-radius: 6px;
  border: 1px solid #dddddd;
  line-height: 20px;
  background: #fcfcfc;
  margin-bottom: 12px;
  background: linear-gradient(to right, white 50%, #fcfcfc 50%);
  background-size: 200% 100%;
  background-position: right bottom;
  transition: all 300ms ease-in-out;
}

.hosted-fields--label {
  font-family: courier, monospace;
  text-transform: uppercase;
  font-size: 14px;
  display: block;
  margin-bottom: 6px;
}

.button-container {
  display: block;
  text-align: center;
}

.button {
  cursor: pointer;
  font-weight: 500;
  line-height: inherit;
  position: relative;
  text-decoration: none;
  text-align: center;
  border-style: solid;
  border-width: 1px;
  border-radius: 3px;
  -webkit-appearance: none;
  -moz-appearance: none;
  display: inline-block;
}

.button--small {
  padding: 10px 20px;
  font-size: 0.875rem;
}

.button--green {
  outline: none;
  background-color: #64d18a;
  border-color: #64d18a;
  color: white;
  transition: all 200ms ease;
}

.button--green:hover {
  background-color: #8bdda8;
  color: white;
}

.braintree-hosted-fields-focused {
  border: 1px solid #64d18a;
  border-radius: 1px;
  background-position: left bottom;
}

.braintree-hosted-fields-invalid {
  border: 1px solid #ed574a;
}

.braintree-hosted-fields-valid {
}

#cardForm {
  max-width: 50.75em;
  margin: 0 auto;
  padding: 1.875em;
}
        </style>
       </head>
      <body>
        
<script src="https://js.braintreegateway.com/web/3.62.1/js/client.min.js"></script>    
<script src="https://js.braintreegateway.com/web/3.62.1/js/hosted-fields.min.js"></script> 
<script src="https://js.braintreegateway.com/web/3.62.1/js/data-collector.min.js"></script> 
<script src='https://js.braintreegateway.com/web/3.62.1/js/three-d-secure.min.js'></script>

<script src="https://www.paypal.com/sdk/js?components=buttons,hosted-fields&client-id=ARLF4LUwz7LHsNM6LG_k7lMcH9M9UCSouN5LvvLv6KxRjVezzfPeACXSqZ7FClrG3UyqSeNLEwWWk-F_&currency=USD&buyer-country=DE&intent=capture" data-client-token="<%= token %>"></script>
<div id=div1  >
<form id="my-sample-form">
  <label for="card-number">Card Number</label>
  <div id="card-number"  class="hosted-field"></div>
  <label for="expiration-date">Expiration Date</label>
  <div id="expiration-date"  class="hosted-field"></div>
  <label for="cvv">CVV</label>
  <div id="cvv"  class="hosted-field"></div>
  <input type="checkbox" id="vault" name="vault">
  <label for="vault">Save your Card</label>
  <input type="submit" value="Pay" disabled />
  <!--<button value="submit" id="submit" class="btn">Pay with Card</button>-->
</form>
</div>
<div id="payments-sdk__contingency-lightbox"></div>

<script>
// Check if card fields are eligible to render for the buyer's country. The card fields are not eligible in all countries where buyers are located.

      var form = document.querySelector('#my-sample-form');
      var submit = document.querySelector('input[type="submit"]');

      braintree.client.create({
        authorization: "<%= bt_client_token %>"
      }, function (clientErr, clientInstance) {
        if (clientErr) {
          console.error(clientErr);
          return;
        }

        // This example shows Hosted Fields, but you can also use this
        // client instance to create additional components here, such as
        // PayPal or Data Collector.

        braintree.hostedFields.create({
          client: clientInstance,
          styles: {
            'input': {
              'font-size': '14px'
            },
            'input.invalid': {
              'color': 'red'
            },
            'input.valid': {
              'color': 'green'
            }
          },
          fields: {
            number: {
              selector: '#card-number',
              placeholder: '4111 1111 1111 1111'
            },
            cvv: {
              selector: '#cvv',
              placeholder: '123'
            },
            expirationDate: {
              selector: '#expiration-date',
              placeholder: '10/2022'
            }
          }
        }, function (hostedFieldsErr, hostedFieldsInstance) {
          if (hostedFieldsErr) {
            console.error(hostedFieldsErr);
            return;
          }

          submit.removeAttribute('disabled');

          form.addEventListener('submit', function (event) {
            event.preventDefault();

            hostedFieldsInstance.tokenize(function (tokenizeErr, payload) {
              if (tokenizeErr) {
                console.error(tokenizeErr);
                return;
              }

              // If this was a real integration, this is where you would
              // send the nonce to your server.
              console.log('Got a nonce: ' + payload.nonce);
              var threeDSecure;
              var nonce=payload.nonce;
              var bin=payload.details.bin;
              braintree.threeDSecure.create({
              version: 2, // Will use 3DS 2 whenever possible
              client: clientInstance
              }, function (threeDSecureErr, threeDSecureInstance) {
                if (threeDSecureErr) {
                // Handle error in 3D Secure component creation
                return;
              }
              threeDSecure = threeDSecureInstance;
              
              var threeDSecureParameters = {
               amount: '100.00',
               nonce: nonce, // Example: hostedFieldsTokenizationPayload.nonce
               // bin: bin, // Example: hostedFieldsTokenizationPayload.details.bin
                onLookupComplete: function (data, next) {
            // use `data` here, then call `next()`
            next();
            }};

            threeDSecure.verifyCard(threeDSecureParameters, function (err, response) {
            if (err) {
            // Handle error
            return;
            }
  // Send response.nonce to your server for use in your integration
  // The 3D Secure Authentication ID can be found 
  //  at response.threeDSecureInfo.threeDSecureAuthenticationId
  fetch('/checkout', {
              method: 'POST',
              headers: {
              'Content-Type': 'application/json',
              },
              body: JSON.stringify({"payment_method_nonce":response.nonce,
              "currency":"testalipayaliexpress","total":"100"})
               }).then(response => {
              if (!response.ok) {
                 alert('Something went wrong');
               }
               console.log("Payment is successful");
               alert("Payment is successful");
              });

      });// end of 3DS verify card
  });// end of 3DS object creation
});// end of hosted field tokenization 
},false); // end of form submit event handler 
});// end of hosted fields create
});// end of braintree instance create            




// console.log("Just before entering hosted fields check");
//   if (paypal.HostedFields.isEligible() === true) {
//     console.log("Hosted Fields is enabled");
//     paypal.HostedFields.render({
//       createOrder: function(data, actions) {
//         return fetch('/create-order', { method: 'POST' }).then(function(res) {
//             return res.json();
//         }).then(function(data) {
//             return data.id;
//         });
//       },
//       styles: {
//           'input': {
//               'font-size': '14px',
//               'font-family': 'Product Sans',
//               'color': '#3a3a3a'
//           },
//           ':focus': {
//               'color': 'black'
//           }
//       },
//       fields: {
//           number: {
//               selector: '#card-number',
//               placeholder: 'Credit Card Number',
//           },
//           cvv: {
//               selector: '#cvv',
//               placeholder: 'CVV',
//           },
//           expirationDate: {
//               selector: '#expiration-date',
//               placeholder: 'MM/YYYY',
//           }
//       }
//     }).then(hostedFields => {
//       document.querySelector('#my-sample-form').addEventListener('submit', event => {
//         event.preventDefault();
//         hostedFields.submit(
//           {
//           // Need to specify the buyer action to save the card
//           contingencies: ['3D_SECURE'],
//           vault: document.querySelector('#vault').checked,
//           }
//         ).then(payload => {
//           console.log("Order Id is "+payload.orderId);
//           console.log(payload.liabilityShifted);
          
//           if (payload.liabilityShifted === undefined) {
//                      // Handle no 3D Secure contingency passed scenario
//                      console.log("Entering no 3DS");
//                      return fetch('/capture-order/' + payload.orderId, {
//             method: 'POST'
//           }).then(response => {
//             if (!response.ok) {
//               alert('Something went wrong');
//             }
//             console.log("Payment is successful");
//             alert("Payment is successful");
//           });
//                 }

//                 if (payload.liabilityShifted) {
//                      // Handle Buyer confirmed 3D Secure successfully
//                      console.log("Entering 3DS completed successfully");
//                      return fetch('/capture-order/' + payload.orderId, {
//             method: 'POST'
//           }).then(response => {
//             if (!response.ok) {
//               alert('Something went wrong');
//             }
//             console.log("Payment is successful");
//             alert("Payment is successful");
//           });
//                 }

//                 if (payload.liabilityShifted === false) {
//                      // Handle buyer failed or skipped 3D Secure use-case
//                      console.log("Entering 3DS failure case");
//                      return fetch('/capture-order/' + payload.orderId, {
//             method: 'POST'
//           }).then(response => {
//             if (!response.ok) {
//               alert('Something went wrong');
//             }
//             console.log("Payment is successful");
//             alert("Payment is successful");
//           });
//                 }
//               }).catch(function (error) {
//                               console.log('PayPal CCF submission failed:' + error);
//                               // error: {code: 'error', description: 'error'}                        // NOTE Consumer cancels 3D Secure flow within online banking app. Conflicts with above options.
//                         }).finally(()=> console.log("Finally Executed"));
//       });
//     });
//   }
</script>
       
          <div id="paypal-button-container"></div>
          <script>
           paypal.Buttons(
             { 
              style: {
                color:  'blue',
                shape:  'pill',
                label:  'pay',
                layout: 'vertical'
            }, 
                createOrder: function (data, actions) { 
                  return fetch('/create-order', { 
                    method: 'POST' 
                  }).then(function(res){
                     return res.json();
                    }).then(function(data) {
                      return data.id;
                    });
                  },
                  onApprove: function (data, actions) {
                    return fetch('/capture-order/' + data.orderID, {
                    method: 'POST'}
                    ).then(function(res) {
                      if(!res.ok)
                      {
                        alert('Something went wrong'); 
                      }
                      return res.json();
                    }).then(function(data){
                      if(data.status=='success'){
                      alert("Payment captured successfully");
                    }
                    });
                    }
              }).render('#paypal-button-container');
          </script>
      
    </body></html>